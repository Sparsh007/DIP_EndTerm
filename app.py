# -*- coding: utf-8 -*-
"""Sparsh_Sharma_PIET18CS138_DIP_EndTerm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tZgEcuPiYvSO9rwKRQ0x9quAkHsPCm-4

**Q1.** Provide Drop Down with options for Logical AND, and Logical XOR of an image to the user
and perform the operations according to the choice of user on the following images. Also
Deploy the same on Heruko and provide the URL.
"""

import numpy as np
import pandas as pd
import cv2 as cv
from google.colab.patches import cv2_imshow # for image display
from skimage import io
from PIL import Image 
import matplotlib.pylab as plt

from google.colab import files
uploaded = files.upload()

!pip install streamlit

!pip install pyngrok

!ngrok authtoken 1rpxylaE7B46qwaAnOv4floLqyW_4p3qqTnPchNqaqio7tZwV

img=cv.imread('dip1.png')
cv2_imshow(img)
print(img.shape)

img2=cv.imread('dip2.png')
cv2_imshow(img2)
print(img2.shape)

#@title Logical Operations {run: 'auto'}
Operation = "NOT" #@param["NOT","XOR"]
if Operation == "XOR":
  bit_xor=cv.bitwise_xor(img,img2)
  plt.imshow(bit_xor)
if Operation == "NOT":
  bit_not=cv.bitwise_not(img)
  plt.imshow(bit_not)

"""**Q2.** Remove Salt and Pepper noise in the below image."""

def main():   
    
    img3 = cv2.imread('dip3.png')
    img3 = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    plt.imshow(img3)
    rows, cols, chan = img3.shape
    #rows, cols= img.shape
    p = 0.25

    output = np.zeros(img3.shape, np.uint8)

    for i in range(rows):
      for j in range(cols):
        r = random.random()
        if r < p/2:
          # pepper sprinkled 
          output[i][j] = [0,0,0]
        elif r < p:                 #P/2 <r < P
          # salt sprinkled 
          output[i][j] = [255,255,255]
        else:
          output[i][j] = img3[i][j]
    
    denoised = cv2.medianBlur(output, 5)

    result = [img3, output, denoised]
    titles = [ 'Original', 'Noisy', 'Denoised']

    for i in range(3):
      plt.subplot(1,3,i+1)
      plt.imshow(result[i])
      plt.title(titles[i])
      plt.xticks([])
      plt.yticks([])
    
    #plt.show()
    print(img3.shape)

if __name__ == "_main_":
    main()